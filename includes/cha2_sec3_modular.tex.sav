\section{A review of modular approaches}
\label{cha2:sec3}


\subsection{Modular approaches in AI}
\label{cha2:sec3:modular:ai}

% TODO: Modular approach in cognitive science (artificial intelligent and neuroscience), control and robotics
It has also been shown to be an effective architecture of building intelligent systems~\cite{bryson2004modular,BrysonMcG12}.


% MOSAIC
In robotics, it is particular useful for tasks in non-stationary environments~\cite{sugimoto2012emosaic}.
One typical hypothesis of modular model in motor control is MOSAIC: the Modular Selection and Identification of Control. It is a paradigm of multiple module control, where each module is composed of a forward model and an inverse model. The forward models are responsible for estimating the task context in real time, and the inverse models are used to generate appropriate motor command for the context. The inverse models are weighted by the accuracy of the estimations of their corresponding forward models. The final motor command is the linear combination of the commands factored by their weights.

\subsection{Modular approaches in control}
\label{cha2:sec3:modular:control}
%Aim: MMAC is good, useful. Discussed for long. Hard to decide -> learning.

% Adaptive control
The use of modular approaches in the control theory is different from in AI. As discussed above, in the discipline of AI, the modularity is in needed when building a large complex versatile system. In the discipline of control theory, at the other hand, the modular approaches are used to handle the adaptive control problem, which is usually referred as the multiple model adaptive control (MMAC).
%It is method to handel .... problems in adaptive control.
Adaptive control is the control method that the controller change itself to adapt to the changes in the control condition.
An commonly used example is the controller of an airplane needs to adapt to the reduction of the weight of the oil.
Conventional adaptive control methods rely on state estimation. The controller try to estimate the changes of the system dynamics and then modulate its control parameters to adapt to the changes. For frequently changing environment, however, the period of modulation of the control parameters may cause a transient error, where strong fluctuation can downgrade the performance and damage the hardware. MMAC is used to reduce the transient error by conducting a fast adaption. A MMAC system is usually composite by a few different controllers, each particularly designed for one control condition. During the control process, the environment is monitor in realtime and one or more controllers suitable for this environment are activate to generate the control command. When the system encounters a sudden change, it will adapt to it by activating another set of controllers. It does not need to re-optimise the control parameters and hence the transient error is reduced.

MMAC can date back to the 1970s. \citet{athans1977stochastic} use multiple Kalman filters in controlling equilibrium flight, to handle sensor errors and to reconstruct the state variables in different flight conditions. The final adaptive control signal is computed by the linear combination of the control signal generated by each model, weighted by the associated probability. Later, a switching MMAC is proposed and its stability is studied~\citep{fu1986adaptive}.
%Switching was first introduced by Martennson1986
%Morse 1993 study stability
\citet{narendra1994improving} use MMAC to improve the performance of the controller in multiple environments, particulary to reduce the transient error that caused during the transition of the control parameters from one set of optimal values to another set of optimal values. They later used the neural networks to build models for the nonlinear system~\citep{narendra1995adaptation,narendra1997adaptive}. This controller is implemented in a robot manipulator to follow a predefined trajectory and shows improved performance compared to single model control.

To apply MMAC to a practical control problem, the first step is to design how many modules to use and how to decompose the problem space. For linear plants, this problem is addressed by \citet{anderson2000multiple}. They use the concept of Vinnicombe distance to decompose the space. Firstly, an initial random starting point is chosen, where a controller is determined. The controller finds its boundary in the neighborhood where its control is acceptably accurate. At the boundary, a new starting point is chosen and a new controller is determined. This process continue until the whole space is covered. Based on this method, \citet{lourenco2006learning} propose an approach to recognize new condition and learn new controls online to adapt. These methods, however, only perform well for learn plants. How to apply MMAC in nonlinear systems remains a challenge.

In robot control, MMAC have many applications for conducting a task in the frequent varying environments. These changing environments can be caused by many factors such as object interactions. Works on this trend include \citet{petkos2006learning} learning multiple inverse models for controlling robot to follow a trajectory with different workload on the arm; \citet{nakanishi2013spatio} proposing time-based switching method for robot system with variable stiffness actuation to handel the different phases of interaction with the environment; the ``eMOSAIC''~\citep{sugimoto2012emosaic} to bring the MOSAIC from simulation to real robot control. In the last work, the performance of MOSAIC under large observation noise is improved by using an optimal control technique. The method is implements on the 51 DOF humanoid robot CB-i for squatting task and carrying load task. This is by far as we know the first MMAC implemented on a real robot.

Despite the remarkable theoretical accomplishments and many successful applications of MMAC, its application in controling service robot is not flourishing. On one hand it is because robotics always involve nonlinear control problems, of which the MMAC has not a principle solution. On the other hand, MMAC controller itself is difficult to design. Control problems in robotics are highly task specific and the service robots are expected to handle a huge amount of tasks. Hand designing MMAC for these tasks is not cost effective. %Some of the tasks may needed to be end-user defined, that necessitates a simple user-friendly design scheme.

%But how to modularize is still a problem.
%Anderson 2000 how to decide number of modules for linear plan:
%SMMAC decide when to learn a new module online.
%Predictive control with infinite number of modules.

%Robot:
%Narendra 1995 study robot manipulator
%Sethu with multip phases.
%eMOSAIC
%2012_Design of a grasp force adaptive control system with tactile and slip
%
%
%To handle this problem, the multiple model control is introduced in the 1990's ~\citep{narendra1994improving} and later developed~\citep{narendra1995adaptation,narendra1997adaptive}. This approach is inspired by the local expert model introduced by~\citet{jacobs1991adaptive}. This work propose to use local controllers for different subspaces of the system to improve the control performance.
% Talk about basic idea.  1995 in robot manipulator.

% Talk about developement, 1995 in robot manipulator?

% Read review of adaptive control

%Vinnicombe distance to find number of module?

% Vijarkumar's papers?

% multiple control with mixing. different from local expert?


\subsection{Modular approaches in robotics}
\label{cha2:sec3:modular:robotics}
In the previous two sections we list a few applications of the modular approaches in robotics from the AI and control prospectives. The application of modular approaches in robotics does not stop there. The concept of modularity is used in robot motion planning, grasp planning, manipulation planning and etc. In this section, we will give a overview on modular approaches in motion planning. Applications in grasp planning and manipulation will be reviewed in detail in the Section~\ref{cha2:sec5:grasping-modular}.

One of the most well known concept of modularity in robot motion planning is the motion primitives.
To build a versatile service robot that can work in a human dominating environment and assistant human, high level behavior planning is required. This means robots need to be equipped with the ability to plan a sequence of movements that fulfil a commanded task, such as ``clean the table'' and ``put the food into the fridge''. Conventional way of motion planning is done by an search in a high dimensional space formed by the numerous degree of freedoms of the robot. The number of possible solutions to accomplish a task is nearly infinite.

This redundancy is useful. In reality various constraints, such as avoiding obstacles, may be added to the task. Due to the redundancy, we are able to find feasible solutions under multiple task constraints. However, this redundancy also makes planning difficult as the searching space is extremely large. One of the pervasive approach is to do optimization for the task with constraints that mathematically equivalent to the task constraints. The drawback of this optimization approach is that defining an proper cost function and proper constrains of the task is not easy. This requires the robot use to process a certain amount of knowledge in mathematics and mechanism, as well as a deep understanding of the task.

As an alternative, modular approaches is used to reduce the searching space, without getting rid of good solutions. To this end, the concept of motion primitive is introduced into robotics. This is an concept from the neuroscience research. Neuroscientist find evidences suggest that the vertebrate motor system generate motions by combining a small number of motor primitives~\citep{mussa1994linear,mussa1999modular,bizzi2008combining,grillner2011control}. These show the modularized mechanism running in brains: each motor primitive is one module, the combination of many modules generate the complex behavior.

This idea inspires roboticists to develop simple motion primitives and use them as substrates to develop complex behaviors. In robot motion planning, motion primitives are defined as the most elementary motions, each of which serves one particular purpose. A common way to generate motion primitives is extracting them from human demonstrations: motion sequences demonstrated by human are discretized to a sequence of motion primitives. Modularized by the motion primitives, task planning problem is brought from a huge high dimensional searching space to a finite discrete space.
They can be reused in other tasks as functional units. %This motion primitive approach has been studied in many literatures~\ref{}.

% ----- Model motion primitives -----
Many literatures have discussed the motion primitives. Robot motion primitives are learn from human. These approaches mainly focus on three problems, which are also the typical problems in a modular approach: how to model the motion primitives, how to extract motion primitives from a complex motion sequence and how to combine them to form a complex behavior.

In the studies of the first problem, many roboticists encode the motion primitives with statistical or analytical models, which can be modulated in some extend by varying the parameters according to the requirements of a certain task. The Hidden Markov Model (HMM), mixture models such as Gaussian Mixture Model (GMM) and the dynamical systems represented by a set of nonlinear differential equations are the most used modeling methods for motion primitives. HMM is used to encode temporal motions~\citep{inamura2004embodied,kulic2008incremental,takano2008integrating,lee2010incremental,bidan2013robio}. For time independent motions, \citet{gribovskaya2010learning,khansari2010imitation} use GMM to model multiple human demonstrations in the state space, while \citet{ijspeert2002movement,Ijspeert2003attractor,schaal2005learning,peters2008reinforcement} use nonlinear differential equations to capture an observed behavior in an attractor landscape. The later is referred as the Dynamical Movement Primitives (DMP), of which the design principle and roadmap is reviewed in \citep{ijspeert2013dynamical}.

% ----- Segmentation -----
Many of the algorithms mentioned above obtain the motion primitives from manual segmentation of motions. However, it is still not clear to us that how many motion primitives we need to compose all the human daily behaviors and what these primitives should be. To obtain these primitives, demonstrating all primitives or manually extracting motion primitives from demonstrations are not practical. Even if a library of motion primitives existed, to learn a complex behavior from human demonstration, a robot still need to recover the motion primitives from demonstrated motion sequence. Hence, a general automatic mechanism to extract motion primitives is required.

To this end, segmentation of a motion sequence \citep{takano2006humanoid,Pais2013ID879} and clustering of data \citep{kulic2009online,kulic2012incremental} are the most used techniques. These approaches usually rely on a carefully chosen threshold to decide when to segment and stop clustering. A method is to set boundaries on the kinematic variables such as the velocity: \citet{fod2002automated} segment a sequence when a Zero Velocity Crossing (ZVC) is observed. \citet{takano2006humanoid} perform the segmentation according to the correlation among short motions. They first divide the sequence to a set of short notes. When a new motion is demonstrate, they segment it at the moment that the difference between the predicted next note and actual observed one is larger than a threshold. \citet{kulic2008incremental} use a hierarchical clustering method to extract primitives from human motion sequence. Different cut off parameters are tested to evaluate the trade off effect between facilitating quick group formation and introducing misclassification. \citet{Pais2013ID879} extract the primitives according to the variances of the motions in a few demonstrations for a same task. Many other approaches have been proposed to extract motion primitives according to their task requirements. All of these approaches target to extract a set of motion primitives that are independent functional units and generalized enough to be reused in many tasks. With these pre-defined motion primitives, online recovery of a sequence of motion primitives is feasible. With the presumption of an existence of a motion primitive library and reduce the segmentation problem to a online motion recognition problem~\citet{meier2011movement}.
%Approaches in this trend mainly have two directions: algorithms with prior knowledge of the motion primitives and and unsupervised algorithms that do not require prior information. The former direction assume an existence of

% ----- Combine -----
The intention of modeling motion primitives is using them to help with the motion planning problem. According to the task, the use of the motion primitives can be in the form of selecting, mixing and sequencing. The selecting and mixing are for adaptive behavior: robot need to select one or mix a few motion primitives according to the current task context such that it can finish the task.
%Hence another important trend of study is using primitives to form useful behaviors. 
%The ``combination'' has two main forms: selecting and mixing. 
Selection can be decided by a pre-learnt correlation between the primitives and the task contexts: the highest correlated primitive with the current task context is the one to choose~\citep{takano2006primitive}. Some others do this by choosing the primitive that can result in a task status closest to the desired next task status~\citep{}. In mixing the primitives, weight of each is computed to make sure the resulting motion can bring the system to the desired state~\citep{}. From the human robot interaction prospective, robot should be able to understand human verbal commands and plan the action. \citet{} propose a method to associate morpheme words with motion primitives. This potentially enable the robots to understand sentences and plan motion by parsing.


